<div class="min-h-screen bg-gray-100 py-8">
  <div class="max-w-3xl mx-auto px-4">
    <!-- Breadcrumb -->
    <nav class="flex mb-4" aria-label="Breadcrumb">
      <ol class="inline-flex items-center space-x-1">
        <li class="inline-flex items-center">
          <%= link_to pedidos_path, class: "text-gray-700 hover:text-blue-600" do %>
            Pedidos
          <% end %>
        </li>
        <li>
          <div class="flex items-center">
            <span class="mx-2 text-gray-400">/</span>
            <span class="text-gray-500">Formulario</span>
          </div>
        </li>
      </ol>
    </nav>

    <div class="bg-white shadow rounded-lg">
      <!-- Header -->
      <div class="px-6 py-4 border-b border-gray-200">
        <h1 class="text-2xl font-bold text-gray-900">
          üì¶ <%= @pedido.persisted? ? "Editar Pedido" : "Nuevo Pedido" %>
        </h1>
      </div>

      <!-- Form -->
      <div class="px-6 py-6">
        <%= form_with model: @pedido, local: true, class: "space-y-6" do |form| %>
          <!-- Mostrar errores -->
          <% if @pedido.errors.any? %>
            <div class="bg-red-50 border border-red-200 rounded-md p-4">
              <div class="flex">
                <div class="text-red-400">‚ö†Ô∏è</div>
                <div class="ml-3">
                  <h3 class="text-sm font-medium text-red-800">
                    Se encontraron <%= pluralize(@pedido.errors.count, "error") %>:
                  </h3>
                  <div class="mt-2 text-sm text-red-700">
                    <ul class="list-disc list-inside space-y-1">
                      <% @pedido.errors.full_messages.each do |message| %>
                        <li><%= message %></li>
                      <% end %>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          <% end %>

          <!-- Primera fila: Nombre y fecha -->
          <div class="grid grid-cols-2 gap-6">
            <!-- Nombre del pedido -->
            <div>
              <%= form.label :nombre_pedido, "Nombre del Pedido", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= form.text_field :nombre_pedido, 
                  class: "block w-full rounded-md border-gray-300 bg-gray-50 text-gray-500 shadow-sm text-sm",
                  placeholder: "Se genera autom√°ticamente",
                  readonly: true %>
              <p class="mt-1 text-xs text-gray-500">Se genera autom√°ticamente con formato (PED-YYYYMMDD-001)</p>
            </div>

            <!-- Fecha del pedido -->
            <div>
              <%= form.label :fecha_pedido, "Fecha del Pedido", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= form.date_field :fecha_pedido, 
                  class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm" %>
            </div>
          </div>

          <!-- Proveedor -->
          <div>
            <%= form.label :proveedor_id, "Proveedor", class: "block text-sm font-medium text-gray-700 mb-2" %>
            <%= form.select :proveedor_id, 
                options_from_collection_for_select(@proveedores, :id, :nombre, @pedido.proveedor_id),
                { prompt: "Selecciona un proveedor" },
                { class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm", id: "proveedor_select" } %>
            <p class="mt-1 text-xs text-gray-500">Elige el proveedor al que har√°s el pedido. Los productos se filtrar√°n autom√°ticamente.</p>
          </div>

          <!-- Grid para total y estado -->
          <div class="grid grid-cols-2 gap-6">
            <!-- Total -->
            <div>
              <%= form.label :total, "Total del Pedido", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span class="text-gray-500 sm:text-sm">$</span>
                </div>
                <%= form.number_field :total, step: 0.01, min: 0,
                    class: "block w-full pl-7 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm",
                    placeholder: "0.00" %>
              </div>
              <p class="mt-1 text-xs text-gray-500">Se calcula autom√°ticamente con los detalles</p>
            </div>

            <!-- Estado -->
            <div>
              <%= form.label :estado, "Estado del Pedido", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= form.select :estado, 
                  options_for_select(Pedido::ESTADOS.map { |k, v| [v, k] }, @pedido.estado),
                  { prompt: "Selecciona estado" },
                  { class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm" } %>
            </div>
          </div>

          <!-- Secci√≥n de productos -->
          <div class="border border-gray-200 rounded-lg p-4">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-medium text-gray-900">üõçÔ∏è Productos del Pedido</h3>
              <button type="button" id="agregar-producto-btn" 
                      class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                      disabled>
                + Agregar Producto
              </button>
            </div>
            
            <div id="mensaje-proveedor" class="text-center p-4 bg-blue-50 border border-blue-200 rounded-lg mb-4">
              <p class="text-blue-700">
                <span class="font-medium">üí° Selecciona un proveedor</span> para ver los productos disponibles
              </p>
            </div>
            
            <div id="productos-container">
              <!-- Los productos se cargar√°n aqu√≠ din√°micamente -->
            </div>
            
            <div class="mt-4 p-3 bg-gray-50 rounded-lg">
              <div class="flex justify-between items-center">
                <span class="text-sm font-medium text-gray-700">Total del Pedido:</span>
                <span id="total-pedido" class="text-lg font-bold text-gray-900">$0.00</span>
              </div>
            </div>
          </div>

          <!-- Informaci√≥n de estados -->
          <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
            <h3 class="text-sm font-medium text-blue-800 mb-2">üìã Estados del Pedido</h3>
            <div class="text-sm text-blue-700 space-y-1">
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <p><span class="font-medium">‚è≥ Pendiente:</span> Pedido creado, esperando env√≠o</p>
                  <p><span class="font-medium">üöö Enviado:</span> Pedido enviado por el proveedor</p>
                  <p><span class="font-medium">üì• Recibido:</span> Pedido recibido en el taller</p>
                </div>
                <div>
                  <p><span class="font-medium">‚úÖ Completado:</span> Pedido procesado e inventario actualizado</p>
                  <p><span class="font-medium">‚ùå Cancelado:</span> Pedido cancelado</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Informaci√≥n adicional -->
          <div class="bg-yellow-50 border border-yellow-200 rounded-md p-4">
            <h3 class="text-sm font-medium text-yellow-800 mb-2">üí° Informaci√≥n Importante</h3>
            <ul class="text-sm text-yellow-700 space-y-1">
              <li>‚Ä¢ El nombre del pedido se genera autom√°ticamente con formato PED-YYYYMMDD-XXX</li>
              <li>‚Ä¢ Solo se pueden editar pedidos en estado 'Pendiente' o 'Enviado'</li>
              <li>‚Ä¢ El total se calcular√° autom√°ticamente cuando agregues productos al pedido</li>
              <li>‚Ä¢ Los pedidos completados actualizan autom√°ticamente el inventario</li>
            </ul>
          </div>

          <!-- Botones de acci√≥n -->
          <div class="flex items-center justify-end space-x-4 pt-6 border-t border-gray-200">
            <%= link_to "Cancelar", @pedido.persisted? ? pedido_path(@pedido) : pedidos_path, 
                class: "bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg transition duration-200" %>
            <%= form.submit @pedido.persisted? ? "Actualizar Pedido" : "Crear Pedido", 
                class: "bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-200" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let productoIndex = 0;
  const productosContainer = document.getElementById('productos-container');
  const agregarBtn = document.getElementById('agregar-producto-btn');
  const totalPedido = document.getElementById('total-pedido');
  const totalInput = document.querySelector('input[name="pedido[total]"]');
  const proveedorSelect = document.getElementById('proveedor_select');
  const mensajeProveedor = document.getElementById('mensaje-proveedor');

  // Lista de productos disponibles (se cargar√° din√°micamente)
  let productos = [
    <% @productos.each do |producto| %>
      {
        id: <%= producto.id %>,
        nombre: '<%= j producto.nombre %>',
        precio: <%= producto.precio_unitario %>
      },
    <% end %>
  ];

  function crearFilaProducto(index) {
    return `
      <div class="producto-item border border-gray-200 rounded-lg p-4 mb-3" data-index="${index}">
        <div class="grid grid-cols-4 gap-4 items-end">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Producto</label>
            <select name="pedido[detalles_pedidos_attributes][${index}][producto_id]" 
                    class="producto-select w-full rounded-md border-gray-300 text-sm" 
                    data-index="${index}" required>
              <option value="">Seleccionar producto</option>
              ${productos.map(p => `<option value="${p.id}" data-precio="${p.precio}">${p.nombre}</option>`).join('')}
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Cantidad</label>
            <input type="number" 
                   name="pedido[detalles_pedidos_attributes][${index}][cantidad]"
                   class="cantidad-input w-full rounded-md border-gray-300 text-sm"
                   data-index="${index}"
                   min="1" value="1" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Precio Unitario</label>
            <input type="number" 
                   name="pedido[detalles_pedidos_attributes][${index}][precio_unitario]"
                   class="precio-input w-full rounded-md border-gray-300 text-sm"
                   data-index="${index}"
                   step="0.01" min="0" required>
          </div>
          <div class="flex items-center space-x-2">
            <span class="subtotal text-lg font-bold text-gray-900">$0.00</span>
            <button type="button" class="eliminar-producto text-red-600 hover:text-red-800 p-1"
                    data-index="${index}" title="Eliminar producto">
              üóëÔ∏è
            </button>
          </div>
        </div>
      </div>
    `;
  }

  function actualizarTotales() {
    let total = 0;
    document.querySelectorAll('.producto-item').forEach(item => {
      const cantidad = parseFloat(item.querySelector('.cantidad-input').value) || 0;
      const precio = parseFloat(item.querySelector('.precio-input').value) || 0;
      const subtotal = cantidad * precio;
      
      item.querySelector('.subtotal').textContent = `$${subtotal.toFixed(2)}`;
      total += subtotal;
    });
    
    totalPedido.textContent = `$${total.toFixed(2)}`;
    totalInput.value = total.toFixed(2);
  }

  function actualizarOpcionesProductos() {
    document.querySelectorAll('.producto-select').forEach(select => {
      const valorAnterior = select.value;
      select.innerHTML = '<option value="">Seleccionar producto</option>';
      
      productos.forEach(producto => {
        const option = document.createElement('option');
        option.value = producto.id;
        option.textContent = producto.nombre;
        option.dataset.precio = producto.precio;
        if (producto.id == valorAnterior) {
          option.selected = true;
        }
        select.appendChild(option);
      });
    });
  }

  function cargarProductosPorProveedor(proveedorId) {
    if (!proveedorId) {
      productos = [];
      agregarBtn.disabled = true;
      mensajeProveedor.style.display = 'block';
      // Limpiar productos existentes
      productosContainer.innerHTML = '';
      actualizarTotales();
      return;
    }

    fetch(`/pedidos/productos_por_proveedor?proveedor_id=${proveedorId}`)
      .then(response => response.json())
      .then(data => {
        productos = data.map(p => ({
          id: p.id,
          nombre: p.nombre,
          precio: p.precio_unitario
        }));
        
        agregarBtn.disabled = false;
        mensajeProveedor.style.display = 'none';
        
        // Actualizar selects de productos existentes
        actualizarOpcionesProductos();
        
        // Si no hay productos en el contenedor, agregar uno por defecto
        if (productosContainer.children.length === 0) {
          agregarBtn.click();
        }
      })
      .catch(error => {
        console.error('Error cargando productos:', error);
        alert('Error al cargar los productos del proveedor');
      });
  }

  // Manejar cambio de proveedor
  proveedorSelect.addEventListener('change', function() {
    cargarProductosPorProveedor(this.value);
  });

  agregarBtn.addEventListener('click', function() {
    if (productos.length === 0) {
      alert('Selecciona un proveedor primero');
      return;
    }
    const html = crearFilaProducto(productoIndex);
    productosContainer.insertAdjacentHTML('beforeend', html);
    productoIndex++;
  });

  productosContainer.addEventListener('change', function(e) {
    if (e.target.classList.contains('producto-select')) {
      const option = e.target.selectedOptions[0];
      const precio = option.dataset.precio || 0;
      const index = e.target.dataset.index;
      const precioInput = document.querySelector(`input[data-index="${index}"].precio-input`);
      precioInput.value = precio;
      actualizarTotales();
    }
  });

  productosContainer.addEventListener('input', function(e) {
    if (e.target.classList.contains('cantidad-input') || e.target.classList.contains('precio-input')) {
      actualizarTotales();
    }
  });

  productosContainer.addEventListener('click', function(e) {
    if (e.target.classList.contains('eliminar-producto')) {
      const item = e.target.closest('.producto-item');
      item.remove();
      actualizarTotales();
    }
  });

  // Cargar productos si ya hay un proveedor seleccionado (para casos de edici√≥n)
  if (proveedorSelect.value) {
    cargarProductosPorProveedor(proveedorSelect.value);
  }
});
</script>
